name: Handle PyPI Publish triggers

# output_object="{\"name\": \"$name\", \"version\": \"$version\", \"archive_url\": \"$archive_url\"}"
on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Name of the package'
        required: true
      version:
        description: 'Version of the package'
        required: true
      archive_url:
        description: 'URL to the archive of the package'
        required: true
      commit_branch:
        description: 'Branch to commit the changes to. Special word "auto" will create a new branch with the name "pypi-{github.run_id}"'
        required: false
        default: 'main'



jobs:
    build-and-commit:
        runs-on: ubuntu-latest

        permissions:
          # pull-requests: write
          contents: write

        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: 3.12

        - name: upsert-package
          env:
            python_service_name: "${{ inputs.name }}"
            python_service_version: "${{ inputs.version }}"
            python_service_archive_url: "${{ inputs.archive_url }}"
            commit_branch: "${{ inputs.commit_branch }}"
            root_dir: "pypi"
            base_url: "https://bitovi.github.io/PyPI"
          run: python src/main.py

        - name: commit changes
          run: |
            echo "configure git"
            git config user.email "github-actions-triggers-allowed[bot]@users.noreply.github.com"
            git config user.name "github-actions[bot]"
  
            echo "git status - before"
            git status

            git_status_before=$(git status)
            echo "git_status_before:"
            echo "$git_status_before"

            git_status_before_grep=$(echo $git_status_before | grep 'nothing to commit')
            git_status_before_grep_exit_code=$?
            echo "git_status_before_grep:"
            echo "$git_status_before_grep"
            echo "git_status_before_grep_exit_code: $git_status_before_grep_exit_code"

            # if the exit code is greater than zero or if the string is empty, then there are changes to commit
            there_are_changes_to_commit=[ $git_status_before_grep_exit_code -gt 0 ] || [ -z "$git_status_before_grep"

            # check if there are any changes to commit
            if [ "$there_are_changes_to_commit" == "false" ]; then
              echo "No changes to commit"
              exit 0
            fi

            branch_is_new=""
            inputs_commit_branch_exists=$(git branch --list "${{ inputs.commit_branch }}")
            if [ "${{ inputs.commit_branch }}" == "auto" ]; then
              echo "git checkout -b pypi-${{ github.run_id }}"
              git checkout -b "pypi-${{ github.run_id }}"
              branch_is_new="true"
            else
              # check if branch exists remotely, and create it if it does not
              if [ -z "${inputs_commit_branch_exists}" ]; then
                echo "git checkout -b ${{ inputs.commit_branch }}"
                git checkout -b "${{ inputs.commit_branch }}"
                branch_is_new="true"
              else
                echo "git checkout ${{ inputs.commit_branch }}"
                git checkout "${{ inputs.commit_branch }}"
              fi
            fi
            
            echo "git add pypi/."
            git add pypi/.
    
            # tmp file for commit message
            commit_message_file="$(mktemp)"
            echo "PyPI Package Upsert" > "${commit_message_file}"
            echo "{ \"name\": \"${{ inputs.name }}\", \"version\": \"${{ inputs.version }}\", \"archive_url\": \"${{ inputs.archive_url }}\" }" >> "${commit_message_file}"

            commit_message="$(cat ${commit_message_file})"

            echo "commit message:"
            echo "${commit_message}"
    
            git commit -m "${commit_message}"
    
            echo "git status - after"
            git status


    
            echo "git push"
            if [ "${branch_is_new}" == "true" ]; then
              git push -u origin HEAD
            else
              git push
            fi